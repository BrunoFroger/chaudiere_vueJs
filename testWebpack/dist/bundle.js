(()=>{"use strict";const e={props:[],data:function(){return{currentDateTime:""}},mounted(){this.updateDateTime(),setInterval(this.updateDateTime,1e3)},template:"        <div>          <h1>Pages de gestion de la chaudiere</h1>          <p>Nous somme le {{currentDateTime}}</p>          <p>Ce site permet de gerer la chaudiere, voici une description des differentes pages accessible depuis le bandeau supérieur:</p>          <ul>            <li>home : page de présentation ; affichée lors de l'ouverture de ce site</li>            <li>calendrier : permet de fixer les périodes de mise en route de la chaudière,               vous disposez de 5 plages par jour sur 1 semaine,               pour chacune de ces plages, vous pouvez fixer les parametres suivants :</li>              <ul>                <li>heure de debut</li>                <li>heure de fin</li>                <li>consigne de chauffage</li>                <li>chauffage on/off</li>              </ul>            <li>temperature : permet de visualiser les differentes temperatures mesurées</li>              <ul>                <li>temperature intérieure</li>                <li>temperature extérieure</li>                <li>consigne de chauffage</li>              </ul>            <li>configuration : permet de visualiser/modifier les parametres de configuration</li>          </ul>        </div>      ",methods:{updateDateTime(){const e=new Date;this.currentDateTime=e.toLocaleString()}}},t={props:[],data:function(){return{currentDateTime:"",consigne:null,chauffageMode:"OFF",chauffageStatus:null,circulateurOnOff:null,commandeVanneChauffage:null,temperatureInterieure:null,temperatureExterieure:null,afficheurOnOff:null}},mounted(){this.updateDateTime(),setInterval(this.updateDateTime,1e3),this.loadDatasCommande()},template:'      <div>        <h1>Page décrivant les commandes de chauffage</h1>        <p>Nous somme le {{currentDateTime}}</p>      </div>      <div>        <table>          <thead>              <tr>                  <th> variable </th>                  <th> valeur </th>                  <th> commentaire </th>              </tr>          </thead>          <tbody>            <tr>              <td> chauffage </td>              <td align="center">                <form>                  <select name="modeChauffage" v-model="chauffageMode" @change="switchChauffageMode()">                    <option value="OFF">OFF</option>                    <option value="PROG">PROG</option>                    <option value="FORCE">FORCE</option>                    <option value="MANUEL">MANUEL</option>                  </select>                </form>              </td>              <td> activation du chauffage :                 <br> OFF : chauffage eteint                <br> PROG : le calendrier (et la temperature) definissent la mise en route du circulateur                <br> FORCE : le chauffage est allumé sans régulation                <br> MANUEL : seule la temperature regule le chauffage              </td>            </tr>            <tr>              <td> plage calendrier </td>              <td align="center">{{chauffageStatus}}</td>              <td> ON si dans une plage active dans le calendrier</td>            </tr>            <tr>              <td> circulateur </td>              <td align="center"> {{circulateurOnOff}} </td>              <td> circulateur en route si chauffage ON et dans une plage calendrier ON </td>            </tr>            <tr>              <td> vanne chauffage </td>              <td align="center">{{commandeVanneChauffage}}</td>              <td> valeur de la commande appliquee a la vanne de chauffage </td>            </tr>            <tr>              <td> Consigne </td>              <td align="center">{{consigne}}</td>              <td> Consigne de temperature </td>            </tr>            <tr>              <td> temperature interieure </td>              <td align="center">{{temperatureInterieure}}</td>              <td> Valeur mesuree de temperature interieure </td>            </tr>            <tr>              <td> temperature exterieure </td>              <td align="center">{{temperatureExterieure}}</td>              <td> Valeur mesuree de temperature iexterieure </td>            </tr>            <tr>              <td> afficheur </td>              <td align="center"> <a href="/switchAfficheurOnOff"> {{afficheurOnOff}} </a></td>              <td> active ou non l\'afficheur de l\'arduino </td>            </tr>          </tbody>        </table>        <button @click="loadDatasCommande">refresh</button>      </div>    ',methods:{updateDateTime(){const e=new Date;this.currentDateTime=e.toLocaleString()},switchModeRegulation(){fetch("/switchModeRegulation").then((e=>{this.loadDatasCommande()}))},switchChauffageMode(){fetch("/switchChauffageMode?mode="+this.chauffageMode).then((e=>{this.loadDatasCommande()}))},loadDatasCommande(){fetch("/getDatasCommande").then((e=>e.json())).then((e=>{this.consigne=e.consigne,this.chauffageMode=e.chauffageMode,this.chauffageStatus=e.chauffageStatus,this.circulateurOnOff=e.circulateurOnOff,this.commandeVanneChauffage=e.commandeVanneChauffage,this.temperatureInterieure=e.temperatureInterieure,this.temperatureExterieure=e.temperatureExterieure,this.afficheurOnOff=e.afficheurOnOff})).catch((e=>{console.error(e),this.consigne=null}))}}},a={props:[],data:function(){return{currentDateTime:"",calendar:{},nbPlage:4,edit:{},days:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"]}},mounted(){console.log("mounted"),this.load(),this.updateDateTime(),setInterval(this.updateDateTime,1e3)},template:'        <div>        <h1>Calendrier de chauffage</h1>        <p>Nous somme le {{currentDateTime}}</p>        <button @click="load">refresh</button>        <table>          <thead>            <tr>              <th></th>              <th colspan="5" v-for="plage in nbPlage">plage {{plage}}</th>            </tr>            <tr>              <th></th>              <template v-for="plage in nbPlage">                <th>début</th>                <th>fin</th>                <th>consigne</th>                <th>actif?</th>                <th>action</th>              </template>            </tr>          </thead>          <tbody>            <tr v-for="day, idx in days">              <td>{{day}}</td>              <template v-for="plage in nbPlage">                <template v-if="edit[`${idx}-${plage}`]">                  <td><input type="number" size="4" v-model.number="edit[`${idx}-${plage}`].heureDebut"/>:<input type="number" size="4" v-model.number="edit[`${idx}-${plage}`].minuteDebut"/></td>                  <td><input type="number" size="4" v-model.number="edit[`${idx}-${plage}`].heureFin"/>:<input type="number" size="4" v-model.number="edit[`${idx}-${plage}`].minuteFin"/></td>                  <td><input type="number" size="6" v-model.number="edit[`${idx}-${plage}`].consigne"/></td>                  <td><input type="checkbox" v-model.boolean="edit[`${idx}-${plage}`].chauffageOnOff"/></td>                  <td>                    <a href="#" @click.prevent="cancelEdit(idx, plage)">cancel</a>                    <a href="#" @click.prevent="saveEdit(idx, plage)">save</a>                  </td>                </template>                <template v-else-if="calendar && calendar[`jour${idx}`] && calendar[`jour${idx}`][`plage${plage}`] && calendar[`jour${idx}`][`plage${plage}`] && calendar[`jour${idx}`][`plage${plage}`].plageActive">                  <td>{{formatDate(calendar[`jour${idx}`][`plage${plage}`].heureDebut, calendar[`jour${idx}`][`plage${plage}`].minuteDebut)}}</td>                  <td>{{formatDate(calendar[`jour${idx}`][`plage${plage}`].heureFin, calendar[`jour${idx}`][`plage${plage}`].minuteFin)}}</td>                  <td>{{formatConsigne(calendar[`jour${idx}`][`plage${plage}`].consigne)}}</td>                  <td>{{calendar[`jour${idx}`][`plage${plage}`].chauffageOnOff ? "oui" : "non"}}</td>                  <td>                    <a href="#" @click.prevent="disablePlage(idx, plage)">disable</a>                    <a href="#" @click.prevent="editPlage(idx, plage)">edit</a>                    </td>                </template>                <template v-else>                  <td colspan="4">inactive</td>                  <td><a href="#" @click.prevent="editPlage(idx, plage)">edit</a></td>                </template>              </template>            </tr>          </tbody>        </table>        </div>      ',methods:{load(){fetch("calendrier.json").then((e=>e.json())).then((e=>{this.calendar=e}))},formatDate:(e,t)=>`${String(e).padStart(2,"0")}:${String(t).padStart(2,"0")}`,editPlage(e,t){this.calendar&&this.calendar[`jour${e}`]&&this.calendar[`jour${e}`][`plage${t}`]&&this.calendar[`jour${e}`][`plage${t}`].plageActive?this.edit[`${e}-${t}`]=this.calendar[`jour${e}`][`plage${t}`]:this.edit[`${e}-${t}`]={modele:0,heureDebut:0,minuteDebut:0,heureFin:23,minuteFin:59,chauffageOnOff:!1,consigne:200,plageActive:!0},console.log("this.edit",this.edit)},disablePlage(e,t){let a=!0;this.calendar&&this.calendar[`jour${e}`]&&this.calendar[`jour${e}`][`plage${t}`]&&this.calendar[`jour${e}`][`plage${t}`].plageActive&&(a=!1),DEBUG?this.calendar[`jour${e}`][`plage${t}`].plageActive=a:this.load()},cancelEdit(e,t){delete this.edit[`${e}-${t}`]},saveEdit(e,t){console.log("saveConfig",`jour${e}`,`plage${t}`,JSON.stringify(this.edit[`${e}-${t}`],null,2)),DEBUG?(this.calendar[`jour${e}`][`plage${t}`]=this.edit[`${e}-${t}`],delete this.edit[`${e}-${t}`]):(delete this.edit[`${e}-${t}`],this.load())},formatConsigne:e=>`${e/10}.${e%10} °C`,updateDateTime(){const e=new Date;this.currentDateTime=e.toLocaleString()}}},i={props:[],data:function(){return{currentDateTime:"",temperatureInterieure:null,temperatureExterieure:null,ipTempInt:null,ipTempExt:null,consigne:null}},mounted(){this.updateDateTime(),setInterval(this.updateDateTime,1e3),this.loadDatasTemperatures()},template:"      <div>        <h1>Temperatures</h1>        <p>Nous somme le {{currentDateTime}}</p>      </div>      <div>        <form>          <table>            <thead>              <tr>                <th>variable</th>                <th>valeur</th>              </tr>            </thead>            <tbody>              <tr>                <td>Temperature interieure</td>                <td>{{temperatureInterieure}}</td>              </tr>              <tr>                <td>Temperature exterieure</td>                <td>{{temperatureExterieure}}</td>              </tr>              <tr>                <td>Consigne de chauffage</td>                <td>                  <input id='consigne' name='consigne' v-model='consigne' @keyup.enter='updateConsigne()'/>                </td>              </tr>              <tr>                <td>Adresse IP capteur temp int</td>                <td>                  <input id='ipTempInt' name='ipTempInt' v-model='ipTempInt' @keyup.enter='updateIpTempInt()'/>                </td>              </tr>              <tr>                <td>Adresse IP capteur temp ext</td>                <td>                  <input id='ipTempExt' name='ipTempExt' v-model='ipTempExt' @keyup.enter='updateIpTempExt()'/>                </td>              </tr>            </tbody>          </table>        </form>        <button @click='loadDatasTemperatures'>refresh</button>      </div>      ",methods:{updateDateTime(){const e=new Date;this.currentDateTime=e.toLocaleString()},updateConsigne(){fetch("/updateConsigne?consigne="+this.consigne).then((e=>{this.loadDatasTemperatures()}))},updateIpTempInt(){fetch("/updateIpTempInt?ip="+this.ipTempInt).then((e=>{this.loadDatasTemperatures()}))},updateIpTempExt(){fetch("/updateIpTempExt?ip="+this.ipTempExt).then((e=>{this.loadDatasTemperatures()}))},loadDatasTemperatures(){fetch("/getDatasTemperatures").then((e=>e.json())).then((e=>{this.consigne=e.consigne,this.temperatureInterieure=e.temperatureInterieure,this.temperatureExterieure=e.temperatureExterieure,this.ipTempInt=e.ipTempInt,this.ipTempExt=e.ipTempExt})).catch((e=>{console.error(e),this.consigne=null}))}}},n={props:[],data:function(){return{currentDateTime:"",environnements:{},consigne:"NC",envSelectionne:"NC",pinRelai:"NC",heureEteHivers:"NC",chauffageOnOff:"NC",adresseIpTempInt:"NC",consigneJour:"NC",consigneNuit:"NC",consigneAbsent:"NC"}},mounted(){this.loadEnvironnements(),this.loadDatasConfig(),this.updateDateTime(),setInterval(this.updateDateTime,1e3)},template:'      <div>        <h1>Configuration</h1>        <p>Nous somme le {{currentDateTime}}</p>        <p>Cette page affiche les parametres contenus dans la carte SD</p>        <p>Pour modifier l\'environnement a utiliser ; il faut éditer le fichier de configuration sur la carte SD</p>      </div>      <div>        <table>          <thead>            <tr>              <th>variable</th>              <th>valeur</th>            </tr>          </thead>          <tbody>              <tr>                  <td>Consigne</td>                  <td>{{formatConsigne(consigne)}}</td>              </tr>              <tr>                  <td>Environnement utilise</td>                  <td>{{envSelectionne}}</td>              </tr>              <tr>                  <td>Pin relai</td>                  <td>{{pinRelai}}</td>              </tr>              <tr>                  <td>Heure été/hiver</td>                  <td>{{heureEteHivers ? "été" : "hivers"}}</td>              </tr>              <tr>                  <td>chauffage</td>                  <td>{{chauffageOnOff ? "ON" : "OFF"}}</td>              </tr>              <tr>                  <td>Adresse capteur temp interieure</td>                  <td>                    <form >                      <input id="ipTempInt" name="ipTempInt" valeur="{{adresseIpTempInt}}">                    </form>                  </td>              </tr>              <tr>                  <td>Référence consigne jour</td>                  <td>{{formatConsigne(parseInt(consigneJour))}}</td>              </tr>              <tr>                  <td>Référence consigne nuit</td>                  <td>{{formatConsigne(parseInt(consigneNuit))}}</td>              </tr>              <tr>                  <td>Référence consigne absent</td>                  <td>{{formatConsigne(parseInt(consigneAbsent))}}</td>              </tr>          </tbody>        </table>      </div>      <p>liste des environnements definis</p>      <div>        <table>          <thead>            <tr>              <th>id</th>              <th>nom</th>              <th>Wifi SSID</th>              <th>Wifi pwd</th>            </tr>          </thead>          <tbody>            <tr v-for="environnement, idx in environnements">              <td>{{idx}}</td>              <td>{{environnements[idx].nom}}</td>              <td>{{environnements[idx].ssid}}</td>              <td>{{environnements[idx].pwd}}</td>            </tr>          </tbody>        </table>      </div>      <div>        <p><a href="/sauveConfig">  sauver la configuration </a></p>      </div>      <div>        <p><a href="/listFichierConfig">  afficher fichier de configuration </a></p>      </div>    ',methods:{loadEnvironnements(){fetch("environnements.json").then((e=>e.json())).then((e=>{this.environnements=e,console.log("environnelents : "+e)}))},loadDatasConfig(){fetch("/getDatasConfig").then((e=>e.json())).then((e=>{this.consigne=e.consigne,this.envSelectionne=e.envSelectionne,this.pinRelai=e.pinRelai,this.regulation=e.regulation,this.heureEteHivers=e.heureEteHivers,this.chauffageOnOff=e.chauffageOnOff,this.adresseIpTempInt=e.adresseIpTempInt,this.consigneJour=e.consigneJour,this.consigneNuit=e.consigneNuit,this.consigneAbsent=e.consigneAbsent})).catch((e=>{console.error(e),this.consigne=null})),console.log("consigne = "+this.consigne)},formatConsigne:e=>`${e/10}.${e%10} °C`,updateDateTime(){const e=new Date;this.currentDateTime=e.toLocaleString()}}},{createApp:r}=Vue,d=r({data:()=>({page:"home",board:null,copyright:null}),mounted(){this.loadDatasPiedPage()},template:'        <div class="entete">          <table>            <tr>              <td><a href="#" @click.prevent="page=\'home\'">home</a></td>              <td><a href="#" @click.prevent="page=\'commande\'">commande</a></td>              <td><a href="#" @click.prevent="page=\'calendrier\'">calendrier</a></td>              <td><a href="#" @click.prevent="page=\'temperature\'">temperature</a></td>              <td><a href="#" @click.prevent="page=\'configuration\'">configuration</a></td>              <td><a href="#" @click.prevent="page=\'calendrier2\'">calendrier2</a></td>            </tr>          </table>        </div>        <div>          <component v-bind:is="page"></component>        </div>        <div class="piedPage">          <p>Ce serveur est hébergé sur un arduino : {{board}}</p>          <i>Créé par : {{copyright}}</i>        </div>      ',methods:{loadDatasPiedPage(){fetch("/getDatasPiedPage").then((e=>e.json())).then((e=>{this.board=e.board,this.copyright=e.copyright})).catch((e=>{console.error(e)}))}}});d.component("home",e),d.component("commande",t),d.component("calendrier",a),d.component("temperature",i),d.component("configuration",n),d.mount("#app")})();